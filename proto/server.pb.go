// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Empty
	Device
	DeviceList
	LightChange
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Device struct {
	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The ID of the object
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId" json:"object_id,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto1.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DeviceList struct {
	// List of Devices
	Device []*Device `protobuf:"bytes,1,rep,name=device" json:"device,omitempty"`
}

func (m *DeviceList) Reset()                    { *m = DeviceList{} }
func (m *DeviceList) String() string            { return proto1.CompactTextString(m) }
func (*DeviceList) ProtoMessage()               {}
func (*DeviceList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeviceList) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type LightChange struct {
	Dev   *Device `protobuf:"bytes,1,opt,name=dev" json:"dev,omitempty"`
	State bool    `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (m *LightChange) Reset()                    { *m = LightChange{} }
func (m *LightChange) String() string            { return proto1.CompactTextString(m) }
func (*LightChange) ProtoMessage()               {}
func (*LightChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LightChange) GetDev() *Device {
	if m != nil {
		return m.Dev
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Device)(nil), "proto.Device")
	proto1.RegisterType((*DeviceList)(nil), "proto.DeviceList")
	proto1.RegisterType((*LightChange)(nil), "proto.LightChange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WinkService service

type WinkServiceClient interface {
	ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error)
	Switch(ctx context.Context, in *LightChange, opts ...grpc.CallOption) (*Empty, error)
}

type winkServiceClient struct {
	cc *grpc.ClientConn
}

func NewWinkServiceClient(cc *grpc.ClientConn) WinkServiceClient {
	return &winkServiceClient{cc}
}

func (c *winkServiceClient) ListDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := grpc.Invoke(ctx, "/proto.WinkService/ListDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *winkServiceClient) Switch(ctx context.Context, in *LightChange, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.WinkService/Switch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WinkService service

type WinkServiceServer interface {
	ListDevices(context.Context, *Empty) (*DeviceList, error)
	Switch(context.Context, *LightChange) (*Empty, error)
}

func RegisterWinkServiceServer(s *grpc.Server, srv WinkServiceServer) {
	s.RegisterService(&_WinkService_serviceDesc, srv)
}

func _WinkService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinkServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WinkService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinkServiceServer).ListDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WinkService_Switch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinkServiceServer).Switch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WinkService/Switch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinkServiceServer).Switch(ctx, req.(*LightChange))
	}
	return interceptor(ctx, in, info, handler)
}

var _WinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WinkService",
	HandlerType: (*WinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _WinkService_ListDevices_Handler,
		},
		{
			MethodName: "Switch",
			Handler:    _WinkService_Switch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto1.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x8f, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x1b, 0x4a, 0x4c, 0x7b, 0x29, 0x03, 0x27, 0x86, 0xa8, 0x0c, 0x54, 0x96, 0x90, 0x3a,
	0xa0, 0x0a, 0xb5, 0x13, 0x33, 0x65, 0x40, 0xea, 0x94, 0x0e, 0x8c, 0x28, 0x8d, 0x4f, 0x8d, 0x41,
	0xf9, 0x23, 0xfb, 0x14, 0xc4, 0xb7, 0x47, 0x39, 0x67, 0x20, 0x62, 0xb2, 0x9f, 0xdf, 0xbd, 0xdf,
	0x3b, 0xc3, 0xc2, 0x93, 0xeb, 0xc8, 0x6d, 0x5a, 0xd7, 0x70, 0x83, 0xb1, 0x1c, 0xfa, 0x0a, 0xe2,
	0xd7, 0xaa, 0xe5, 0x1f, 0xfd, 0x0c, 0x6a, 0x4f, 0x9d, 0x2d, 0x08, 0x11, 0x2e, 0xeb, 0xbc, 0xa2,
	0x34, 0x5a, 0x45, 0xeb, 0x79, 0x26, 0x77, 0xbc, 0x83, 0x79, 0x73, 0xfa, 0xa4, 0x82, 0x3f, 0xac,
	0x49, 0x2f, 0xc4, 0x98, 0x85, 0x87, 0x37, 0xa3, 0x77, 0x00, 0x21, 0x7a, 0xb0, 0x9e, 0xf1, 0x01,
	0x94, 0x11, 0x95, 0x46, 0xab, 0xe9, 0x3a, 0xd9, 0x5e, 0x87, 0xc2, 0x4d, 0x18, 0xc9, 0x06, 0x53,
	0xef, 0x21, 0x39, 0xd8, 0x73, 0xc9, 0x2f, 0x65, 0x5e, 0x9f, 0x09, 0xef, 0x61, 0x6a, 0xa8, 0x93,
	0xce, 0x7f, 0x91, 0xde, 0xc1, 0x5b, 0x88, 0x3d, 0xe7, 0x4c, 0xd2, 0x3e, 0xcb, 0x82, 0xd8, 0x56,
	0x90, 0xbc, 0xdb, 0xfa, 0xeb, 0x48, 0x4e, 0x56, 0x7f, 0xea, 0xa1, 0x9e, 0x43, 0xce, 0xe3, 0x62,
	0xe0, 0xc8, 0x0f, 0x97, 0x37, 0x23, 0x6a, 0x3f, 0xa7, 0x27, 0xf8, 0x08, 0xea, 0xf8, 0x6d, 0xb9,
	0x28, 0x11, 0x07, 0xfb, 0xcf, 0x56, 0xcb, 0x11, 0x40, 0x4f, 0x4e, 0x4a, 0xe4, 0xee, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xbc, 0x0a, 0xf3, 0x51, 0x4b, 0x01, 0x00, 0x00,
}
